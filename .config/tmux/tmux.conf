# +-------------------------------+
# |     __                        |
# |    / /_____ ___  __  ___  __  |
# |   / __/ __ `__ \/ / / / |/_/  |
# |  / /_/ / / / / / /_/ />  <    |
# |  \__/_/ /_/ /_/\__,_/_/|_|    |
# |                               |
# +-------------------------------+

# use 256 xterm for pretty colors. This enables same colors from iTerm2 within tmux.
# This is recommended in neovim :healthcheck
set  -g default-terminal "screen-256color"
set -ga terminal-overrides ",xterm-256color:Tc"
set-option -sa terminal-overrides ',alacritty:RGB'
set  -g terminal-features "256"

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
        | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|kak)(diff)?$'"

to_clipboard="xclip -i -sel clipboard > /dev/null"
tmux_commands_with_legacy_scroll="nano less man"

#     ____        __  _                 
#    / __ \____  / /_(_)___  ____  _____
#   / / / / __ \/ __/ / __ \/ __ \/ ___/
#  / /_/ / /_/ / /_/ / /_/ / / / (__  ) 
#  \____/ .___/\__/_/\____/_/ /_/____/  
#      /_/                              

set   -g history-limit 5000  # increase scroll-back history
setw  -g mode-keys vi        # use vim key bindings
set   -g mouse on
set  -sg escape-time 5       # decrease command delay (increases vim responsiveness)
set   -g repeat-time 1000    # increase repeat time for repeatable commands
set   -g base-index 1        # start window index at 1 instead of 0
setw  -g pane-base-index 1   # start pane index at 1 instead of 0
setw  -g monitor-activity on # highlight window when it has new activity
set   -g visual-activity off
set   -g renumber-windows on # re-number windows when one is closed
set   -g display-time 1500   # time that messages are displayed

#     ____  _           ___                 
#    / __ )(_)___  ____/ (_)___  ____ ______
#   / __  / / __ \/ __  / / __ \/ __ `/ ___/
#  / /_/ / / / / / /_/ / / / / / /_/ (__  ) 
# /_____/_/_/ /_/\__,_/_/_/ /_/\__, /____/  
#                             /____/        

# Tmux prefix
unbind C-b; set -g prefix C-a; bind C-a send-prefix

# force a reload of the config file
unbind r
bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded tmux config!"

# Copy vim style
# create 'v' alias for selecting text
bind -T copy-mode-vi 'v' send -X begin-selection
# copy with 'enter' or 'y' and send to mac os clipboard: http://goo.gl/2Bfn8
unbind -T copy-mode-vi Enter
bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# paste
bind C-[ copy-mode
bind p paste-buffer
# paste from system clipboard MacOS
# bind C-v run \"tmux set-buffer \"$(reattach-to-user-namespace pbpaste)\"; tmux paste-buffer"

# Copy and paste using the system clipboard
# bind C run "tmux save-buffer - | xclip -i -sel clipboard"
# https://stackoverflow.com/questions/20157617/tmux-hangs-after-run-shell-command-and-do-not-respond-to-any-command
bind-key C-c run-shell "tmux show-buffer | $to_clipboard"
bind-key C-v run-shell "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "$to_clipboard"
bind-key -T copy-mode-vi DoubleClick1Pane  select-pane \; send-keys -X select-word \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$to_clipboard"
bind-key -T copy-mode-vi TripleClick1Pane  select-pane \; send-keys -X select-line \; run-shell -d 0.3 \; send-keys -X copy-pipe-and-cancel "$to_clipboard"
bind-key -T root DoubleClick1Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } { copy-mode -H ; send-keys -X select-word ; run-shell -d 0.3 ; send-keys -X copy-pipe-and-cancel "$to_clipboard"}
bind-key -T root TripleClick1Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } { copy-mode -H ; send-keys -X select-line ; run-shell -d 0.3 ; send-keys -X copy-pipe-and-cancel "$to_clipboard"}

# bind-key -T root WheelUpPane if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" { send-keys -M } { copy-mode -e }
# adapted from https://www.reddit.com/r/tmux/comments/925w9t/how_to_scroll_the_pager_less_in_copy_mode/
bind-key -T root WheelUpPane \
    if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
        'send -Mt=' \
        'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
            "send -t= Up Up Up" "copy-mode -et= \; send-keys WheelUpPane"'
bind-key -T root WheelDownPane \
    if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
        'send -Mt=' \
        'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
            "send -t= Down Down Down" "send -Mt="'

# panes: window splitting 
unbind %
bind | split-window -h
unbind '"'
bind - split-window -v

# Switch panes with hjkl
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Quick window selection
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+
bind C-w choose-window -Z
bind C-q display-panes

# resize panes
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Change panes
bind -n C-Left select-pane -L
bind -n C-Up select-pane -U
bind -n C-Right select-pane -R
bind -n C-Down select-pane -D

bind -T copy-mode-vi C-Left select-pane -L
bind -T copy-mode-vi C-Up select-pane -U
bind -T copy-mode-vi C-Right select-pane -R
bind -T copy-mode-vi C-Down select-pane -D

# Quickly switch panes
unbind ^J
bind ^J select-pane -t :.+

#    _____ __        __                ____            
#   / ___// /_____ _/ /___  _______   / __ )____ ______
#   \__ \/ __/ __ `/ __/ / / / ___/  / __  / __ `/ ___/
#  ___/ / /_/ /_/ / /_/ /_/ (__  )  / /_/ / /_/ / /    
# /____/\__/\__,_/\__/\__,_/____/  /_____/\__,_/_/     
#

# enable UTF-8 support in status bar
set -gq status-utf8 on

set -g status-interval 15 # refresh interval for status bar
set -g status-justify absolute-centre
set -g status-keys vi
set -g status-style fg=white,bg=colour235

# show session, window, pane in left status bar
set -g status-left '#[fg=colour237,bg=colour235]#[fg=green,bg=colour237] #S #[fg=yellow]#I/#[fg=blue]#P #[fg=colour237,bg=colour235]'
set -g status-left-length 40
set -g status-left-style bg=colour237

# show hostname, date, tim 100
set -g status-right '#[fg=colour237,bg=colour235]#[fg=green,bg=colour237]#(battery -t) #[fg=blue] %d %b %R#[fg=colour237,bg=colour235]'
set -g status-right-length 20
set -g status-right-style bg=colour237

# Set the position of the tmux status window 
set -g status-position top

# +--------+
# | Colors |
# +--------+

# color of message
set -g message-style fg=white,bold,bg='#5A5B56'
set -g message-style fg=white,bold,bg=colour237

# highlight current window
setw -g window-status-activity-style fg=white,bold,bg=colour235
setw -g window-status-format "#{window_name}#{?window_activity_flag,!,}"
setw -g window-status-style fg=blue,bg=colour235

setw -g window-status-current-style fg=green,bold,bg=colour235
# setw -g window-status-current-format "#[fg=black,bg=green]#{window_name}#[fg=green,bg=black]"
setw -g window-status-current-format "#[fg=black,bg=green]#{window_name}#[fg=green,bg=colour235]"

# set color of active pane
set -g pane-border-style fg=colour240,bg=black
set -g pane-active-border-style fg=green,bg=black

# dim non active panes (don't like it much)
# setw -g window-style fg=colour240,bg=colour235
# setw -g window-active-style fg=white,bg=black

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

# # Alt hjkl to switch pane
# bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
# bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
# bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
# bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'

# # MacOSX: map ˙∆˚¬ as Alt-{h,j,k,l}
# bind-key -n '˙' if-shell "$is_vim" 'send-keys M-h'  'select-pane -L'
# bind-key -n '∆' if-shell "$is_vim" 'send-keys M-j'  'select-pane -D'
# bind-key -n '˚' if-shell "$is_vim" 'send-keys M-k'  'select-pane -U'
# bind-key -n '¬' if-shell "$is_vim" 'send-keys M-l'  'select-pane -R'

# Alt arrow to switch window (doesn't seem to work)
# Alt q, w (right below the numbers), o for other
bind-key -n 'M-Left' previous-window
bind-key -n 'M-Right' next-window
bind-key -n 'M-q' previous-window
bind-key -n 'M-,' previous-window
bind-key -n 'M-w' next-window
bind-key -n 'M-.' next-window
bind-key -n 'M-o' select-pane -t :.+

# MacOSX
bind-key -n 'œ' previous-window    # MacOSX
bind-key -n '∑' next-window        # MacOSX
bind-key -n 'ø' select-pane -t :.+ # MacOSX

# Easily move windows around
bind-key -n 'M-Q' swap-window -t -1\; select-window -t -1
bind-key -n 'M-W' swap-window -t +1\; select-window -t +1
bind-key -n 'Œ' swap-window -t -1\; select-window -t -1 # MacOSX
bind-key -n '„' swap-window -t +1\; select-window -t +1 # MacOSX

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
        "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"

if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
        "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# +---------------+
# | select window |
# +---------------+ 

bind-key -n 'M-1' select-window -t 1
bind-key -n 'M-2' select-window -t 2
bind-key -n 'M-3' select-window -t 3
bind-key -n 'M-4' select-window -t 4
bind-key -n 'M-5' select-window -t 5
bind-key -n 'M-6' select-window -t 6
bind-key -n 'M-7' select-window -t 7
bind-key -n 'M-8' select-window -t 8
bind-key -n 'M-9' select-window -t 9

# MacOSX: map ¡™£¢∞§¶•ªº as Alt-{1-9}
bind-key -n '¡' select-window -t 1
bind-key -n '™' select-window -t 2
bind-key -n '£' select-window -t 3
bind-key -n '¢' select-window -t 4
bind-key -n '∞' select-window -t 5
bind-key -n '§' select-window -t 6
bind-key -n '¶' select-window -t 7
bind-key -n '•' select-window -t 8
bind-key -n 'ª' select-window -t 9

# +--------------+
# | Page Up/Down |
# +--------------+

# Remap Shift Pageup/Pagedown so that it behaves as in a normal terminal
#  -u option scrolls one page up.
#  -e specifies that scrolling to the bottom of the history (to the visible screen) should exit copy mode. 
bind -n S-Pageup if-shell "$is_vim" "send-keys Pageup" "copy-mode -eu"
bind -n S-Pagedown send-keys Pagedown

# Sometimes shift page up doesn't work, so map this to prefix+page up as well.
bind Pageup if-shell "$is_vim" "send-keys Pageup" "copy-mode -eu"

# When dragging the mouse, do not reset the selection on mouse button release
# unbind -T copy-mode-vi MouseDragEnd1Pane
# unbind -T copy-mode MouseDragEnd1Pane

# source "/usr/share/powerline/bindings/tmux/powerline.conf"

#      ____  __            _           
#     / __ \/ /_  ______ _(_)___  _____
#    / /_/ / / / / / __ `/ / __ \/ ___/
#   / ____/ / /_/ / /_/ / / / / (__  ) 
#  /_/   /_/\__,_/\__, /_/_/ /_/____/  
#                /____/                

# Setup TPM first
#   1) Check instructions on GitHub
# To install plugins:
#   1) Add plugin down here
#   2) Prefix + I to install plugin
# To update plugins:
#   1) Prefix + U
# To remove plugins:
#   1) Remove line down here
#   2) Prefix + ALT + U

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# Add more plugins below this line
# Plugin to save and restore tmux sessions after restart
# * Save with: prefix + Ctrl-s
# * Restore with: prefix + Ctlr-r
set -g @plugin 'tmux-plugins/tmux-resurrect'
# restore vim and nvim sessions as well
set -g @resurrect-strategy-vim 'session' # vim
set -g @resurrect-strategy-nvim 'session' # neovim
set -g @plugin 'tmux-plugins/tmux-continuum'
# Automatic restore
set -g @continuum-restore 'on'

# Make navigation between tmux and vim panes seamlessly 
set -g @plugin 'christoomey/vim-tmux-navigator'

# Run Tmux Plugin Manager
# run '~/.tmux/plugins/tpm/tpm'
