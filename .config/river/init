#!/bin/sh

# This is the example configuration file for river.
#
# If you wish to edit this, you will probably want to copy it to
# $XDG_CONFIG_HOME/river/init or $HOME/.config/river/init first.
#
# See the river(1), riverctl(1), and rivertile(1) man pages for complete
# documentation.

# things I need to get working
# 1) a bar, we could use waybar?
# 2) volume
#    - using volnoti, the keyboard stuff works, with a nice gui
#    - BT headset doesn't work, buttons don't do anyting, the headset does show up in
#      list-inputs... -> it works now !?! I think it started working after I installed playerctl
# 3) screen locking, sleep mode: not working...
#    - check out swayidle
# 4) background
#    - check out swaybg
# 5) multiple keyboard layouts
#    - check out the river wiki

# TODO: don't use pidof, but pgrep instead
# pidof also returns non user processes.

BACKGROUND="/home/luc/Pictures/lights_car_dark_128635_1920x1080.jpg"
TILER=rivercarro

pgrep -u "$USER" volnoti || volnoti -t 1.5 -r 10 -a 0.2 &
pgrep -u "$USER" dunst || dunst &
pgrep -u "$USER" mpd || mpd &
pgrep -u "$USER" mpd-mpris || mpd-mpris &

# idle management
# https://github.com/adrusi/dotfiles/blob/9ee65f91050d39d4e790a2ad91faa4f912ddd4f9/swayidle/.local/bin/swayidle-runtime
inhibit="/home/luc/.config/river/swayidle-inhibit"
lockscreen="swaylock -i \"$BACKGROUND\""
pgrep -u "$USER" swayidle || swayidle \
	timeout 200 "$inhibit --video || brightnessctl --save set 20%" \
    resume "$inhibit --video || brightnessctl --restore" \
	timeout 420 "$inhibit || { gdmflexiserver -s; $lockscreen; }" \
	lock "gdmflexiserver -s; $lockscreen;" \
	unlock "pkill -u $USER swaylock; brightnessctl --restore ;" &

pgrep -u "$USER" swaybg || swaybg -i "$BACKGROUND" &
pgrep -u "$USER" waybar || waybar &

# Note: the "Super" modifier is also known as Logo, GUI, Windows, Mod4, etc.

# Super+Shift+Return to start an instance of foot (https://codeberg.org/dnkl/foot)
riverctl map normal Super+Shift Return spawn kitty
riverctl map normal Super+Alt Return spawn kitty
riverctl map normal Super+Shift Return spawn foot

# Super+Q to close the focused view
riverctl map normal Super Q close

# Open a launcher
riverctl map normal Super P spawn '$(tofi-run --drun-launch=true)'

riverctl map normal Super Period spawn "$HOME/.config/river/river-shifttags --shifts 1"
riverctl map normal Super Comma spawn "$HOME/.config/river/river-shifttags --shifts -1"

riverctl map normal Super+Control L spawn 'gdmflexiserver -s; swaylock'

# Super+Shift+E to exit river
riverctl map normal Super+Shift E exit

# Super+J and Super+K to focus the next/previous view in the layout stack
riverctl map normal Super J focus-view next
riverctl map normal Super K focus-view previous

# Super+Shift+J and Super+Shift+K to swap the focused view with the next/previous
# view in the layout stack
riverctl map normal Super+Shift J swap next
riverctl map normal Super+Shift K swap previous

# Super+Period and Super+Comma to focus the next/previous output
# riverctl map normal Super Period focus-output next
# riverctl map normal Super Comma focus-output previous

# Super+Shift+{Period,Comma} to send the focused view to the next/previous output
riverctl map normal Super+Shift Period send-to-output next
riverctl map normal Super+Shift Comma send-to-output previous

# Super+Return to bump the focused view to the top of the layout stack
riverctl map normal Super Return zoom

# Super+H and Super+L to decrease/increase the main ratio of rivertile(1)
riverctl map normal Super H send-layout-cmd "$TILER" "main-ratio -0.05"
riverctl map normal Super L send-layout-cmd "$TILER" "main-ratio +0.05"

# Super+Shift+H and Super+Shift+L to increment/decrement the main count of rivertile(1)
riverctl map normal Super+Shift H send-layout-cmd "$TILER" "main-count +1"
riverctl map normal Super+Shift L send-layout-cmd "$TILER" "main-count -1"

# Super+Alt+{H,J,K,L} to move views
riverctl map normal Super+Alt H move left 100
riverctl map normal Super+Alt J move down 100
riverctl map normal Super+Alt K move up 100
riverctl map normal Super+Alt L move right 100

# Super+Alt+Control+{H,J,K,L} to snap views to screen edges
riverctl map normal Super+Alt+Control H snap left
riverctl map normal Super+Alt+Control J snap down
riverctl map normal Super+Alt+Control K snap up
riverctl map normal Super+Alt+Control L snap right

# Super+Alt+Shif+{H,J,K,L} to resize views
riverctl map normal Super+Alt+Shift H resize horizontal -100
riverctl map normal Super+Alt+Shift J resize vertical 100
riverctl map normal Super+Alt+Shift K resize vertical -100
riverctl map normal Super+Alt+Shift L resize horizontal 100

# Super + Left Mouse Button to move views
riverctl map-pointer normal Super BTN_LEFT move-view

# Super + Right Mouse Button to resize views
riverctl map-pointer normal Super BTN_RIGHT resize-view

for i in $(seq 1 9); do
	tags=$((1 << (i - 1)))

	# Super+[1-9] to focus tag [0-8]
	riverctl map normal Super "$i" set-focused-tags $tags

	# Super+Shift+[1-9] to tag focused view with tag [0-8]
	riverctl map normal Super+Shift "$i" set-view-tags $tags

	# Super+Ctrl+[1-9] to toggle focus of tag [0-8]
	riverctl map normal Super+Control "$i" toggle-focused-tags $tags

	# Super+Shift+Ctrl+[1-9] to toggle tag [0-8] of focused view
	riverctl map normal Super+Shift+Control "$i" toggle-view-tags $tags
done

# Super+0 to focus all tags
# Super+Shift+0 to tag focused view with all tags
all_tags=$(((1 << 32) - 1))
riverctl map normal Super 0 set-focused-tags $all_tags
riverctl map normal Super+Shift 0 set-view-tags $all_tags

# Super+Space to toggle float
riverctl map normal Super Space toggle-float

# Super+F to toggle fullscreen
riverctl map normal Super F toggle-fullscreen

# Super+{Up,Right,Down,Left} to change layout orientation
riverctl map normal Super Up send-layout-cmd "$TILER" "main-location top"
riverctl map normal Super Right send-layout-cmd "$TILER" "main-location right"
riverctl map normal Super Down send-layout-cmd "$TILER" "main-location bottom"
riverctl map normal Super Left send-layout-cmd "$TILER" "main-location left"

BORDER="riverctl border-width 2"
NOBORDER="riverctl border-width 0"
riverctl map normal Super B spawn "$BORDER"
riverctl map normal Super+Shift B spawn "$NOBORDER"

MONOCLE="$NOBORDER; riverctl send-layout-cmd $TILER \"main-location monocle\""
TOP="$BORDER; riverctl send-layout-cmd $TILER \"main-location top\""
RIGHT="$BORDER; riverctl send-layout-cmd $TILER \"main-location right\""
BOTTOM="$BORDER; riverctl send-layout-cmd $TILER \"main-location bottom\""
LEFT="$BORDER; riverctl send-layout-cmd $TILER \"main-location left\""

if [ "$TILER" = "rivercarro" ]; then
	riverctl map normal Super M send-layout-cmd "$TILER" "main-location monocle"
	riverctl map normal Super M spawn "$MONOCLE"
	riverctl map normal Super Up spawn "$TOP"
	riverctl map normal Super Right spawn "$RIGHT"
	riverctl map normal Super Down spawn "$BOTTOM"
	riverctl map normal Super Left spawn "$LEFT"
fi

# Declare a passthrough mode. This mode has only a single mapping to return to
# normal mode. This makes it useful for testing a nested wayland compositor
riverctl declare-mode passthrough

# Super+F11 to enter passthrough mode
riverctl map normal Super F11 enter-mode passthrough

# Super+F11 to return to normal mode
riverctl map passthrough Super F11 enter-mode normal

# Various media key mapping examples for both normal and locked mode which do
# not have a modifier
for mode in normal locked; do
	# Eject the optical drive (well if you still have one that is)
	riverctl map $mode None XF86Eject spawn 'eject -T'

	# Control pulse audio volume with pamixer (https://github.com/cdemoulins/pamixer)
	riverctl map $mode None XF86AudioRaiseVolume spawn 'pamixer -i 5'
	riverctl map $mode None XF86AudioLowerVolume spawn 'pamixer -d 5'
	riverctl map $mode None XF86AudioMute spawn 'pamixer --toggle-mute'

	riverctl map $mode None XF86AudioRaiseVolume spawn 'pamixer -i 5; volnoti-show $(pamixer --get-volume); dunstify -t 700 -h string:x-canonical-private-synchronous:audio "Volume: " -h int:value:"$(pamixer --get-volume)"'
	riverctl map $mode None XF86AudioLowerVolume spawn 'pamixer -d 5; volnoti-show $(pamixer --get-volume); dunstify -t 700 -h string:x-canonical-private-synchronous:audio "Volume: " -h int:value:"$(pamixer --get-volume)"'
	riverctl map $mode None XF86AudioMute spawn 'pamixer --toggle-mute; test $(pamixer --get-mute) = "false" &&  volnoti-show $(pamixer --get-volume) || volnoti-show -m'

	# Control MPRIS aware media players with playerctl (https://github.com/altdesktop/playerctl)
	riverctl map $mode None XF86AudioMedia spawn 'playerctl play-pause'
	riverctl map $mode None XF86AudioPlay spawn 'playerctl play-pause'
	riverctl map $mode None XF86AudioPrev spawn 'playerctl previous'
	riverctl map $mode None XF86AudioNext spawn 'playerctl next'

	# Control screen backlight brighness with light (https://github.com/haikarainen/light)
	riverctl map $mode None XF86MonBrightnessUp spawn 'light -A 5'
	riverctl map $mode None XF86MonBrightnessDown spawn 'light -U 5'
done

# Set background and border color
riverctl background-color 0x002b36
# riverctl border-color-focused 0x93a1a1
riverctl border-color-focused 0xbfff00
riverctl border-color-unfocused 0x586e75

# Set keyboard repeat rate
riverctl set-repeat 50 300

# Make certain views start floating
riverctl float-filter-add app-id float
riverctl float-filter-add title "popup title with spaces"

# Set app-ids and titles of views which should use client side decorations
riverctl csd-filter-add app-id "gedit"

# Set and exec into the default layout generator, rivertile.
# River will send the process group of the init executable SIGTERM on exit.
riverctl default-layout "$TILER"

TILER="luatile"
riverctl default-layout "$TILER"
if [ "$TILER" = "luatile" ]; then
	riverctl map normal Super+Control L spawn "$HOME/.config/river/luatile-choose-layout"
	riverctl map normal Super H send-layout-cmd "$TILER" "increase_ratio(-0.05)"
	riverctl map normal Super L send-layout-cmd "$TILER" "increase_ratio(0.05)"
	riverctl map normal Super+Shift Space send-layout-cmd "$TILER" "cycle_layouts()"
	riverctl map normal Super M send-layout-cmd "$TILER" "toggle_monocle()"
	riverctl map normal Super+Shift L spawn 'gdmflexiserver -s; swaylock'

	riverctl map normal Super W send-layout-cmd "$TILER" "increase_window_gap(5)"
	riverctl map normal Super+Shift W send-layout-cmd "$TILER" "increase_window_gap(-5)"
	riverctl map normal Super B send-layout-cmd "$TILER" "increase_border_gap(5)"
	riverctl map normal Super+Shift B send-layout-cmd "$TILER" "increase_border_gap(-5)"
	if [ "$1" != "reload" ]; then
		# exec river-luatile
    exec /home/luc/.cargo/bin/river-luatile
	fi
fi

if [ "$1" != "reload" ]; then
	if [ "$TILER" = "rivercarro" ]; then
		exec rivercarro
	fi

	exec rivertile -view-padding 0 -outer-padding 0 -main-ratio 0.62
fi
